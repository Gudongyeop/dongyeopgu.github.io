<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 여러가지</title>
    <link>https://dongyeopgu.github.io/tags/vue.html</link>
    <description>Recent content in Vue on 여러가지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 May 2020 21:55:45 +0900</lastBuildDate>
    
	<atom:link href="https://dongyeopgu.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue.js 기초</title>
      <link>https://dongyeopgu.github.io/vue.js/vue.js-%EA%B8%B0%EC%B4%88.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/vue.js/vue.js-%EA%B8%B0%EC%B4%88.html</guid>
      <description>Vue.js 기초  body태그에 &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Vue.js cdn을 추가하여 사용
 1. Declarative Rendering(선언적 렌더링) &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; &amp;lt;!-- vue cdn --&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; const app = new Vue({ el: &amp;#39;#app&amp;#39;, data: { message: &amp;#39;message&amp;#39; } }) &amp;lt;/script&amp;gt; 2. 조건문(if) &amp;lt;div id=&amp;#34;using-if&amp;#34;&amp;gt; &amp;lt;p v-if=&amp;#34;check&amp;#34;&amp;gt;안녕&amp;lt;/p&amp;gt; &amp;lt;!-- 기본적인 자바스크립트 표현 가능 --&amp;gt; &amp;lt;p v-if=&amp;#34;check===&amp;#39;안녕&amp;#39;&amp;#34;&amp;gt;안녕&amp;lt;/p&amp;gt; &amp;lt;p v-else-if=&amp;#34;check===&amp;#39;반가워&amp;#39;&amp;#34;&amp;gt;반가워&amp;lt;/p&amp;gt; &amp;lt;p v-else&amp;gt;안녕 반가워&amp;lt;/p&amp;gt; &amp;lt;!-- false일 때만 보여주기 --&amp;gt; &amp;lt;p v-if=&amp;#34;!check&amp;#34;&amp;gt;False일때 나타내기&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue CLI</title>
      <link>https://dongyeopgu.github.io/vue.js/vue-cli3.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/vue.js/vue-cli3.html</guid>
      <description>Vue CLI3 설치   공식 문서
   설치 순서 (Windows10)
$ npm install -g @vue/cli$ vue --version # 버젼확인  프로젝트 생성 및 실행  $ vue create &amp;lt;프로젝트 명&amp;gt;$ cd &amp;lt;프로젝트명&amp;gt; # 프로젝트 폴더로 이동$ npm run serve프로젝트 정리    src/App.vue에서 필요없는 기본코드 삭제(아래처럼)
&amp;lt;template&amp;gt;&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;script&amp;gt;export default {name: &amp;#39;App&amp;#39;,components: {},//여기에 data, methods 등 넣으면 됨 }&amp;lt;/script&amp;gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;  컴포넌트 사용 방법   컴포넌트 생성 : components폴더에 .</description>
    </item>
    
    <item>
      <title>Vue.js</title>
      <link>https://dongyeopgu.github.io/vue.js.html</link>
      <pubDate>Mon, 25 May 2020 21:55:45 +0900</pubDate>
      
      <guid>https://dongyeopgu.github.io/vue.js.html</guid>
      <description>Vue.js 학습 내용  학습한 Vue.js 내용 정리
 </description>
    </item>
    
    <item>
      <title>2020.06.01</title>
      <link>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.01.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.01.html</guid>
      <description>오늘 배운 것  Vue로 Todo List작성
   App.vue
&amp;lt;template&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;nav&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;router-view/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt;   TodoView.vue
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;TodoList :todos=&amp;#34;todos&amp;#34; @checked=&amp;#34;updatedTodo&amp;#34;/&amp;gt; &amp;lt;TodoInput @create-todo=&amp;#34;createTodo&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import TodoList from &amp;#39;@/components/TodoList.vue&amp;#39; import TodoInput from &amp;#39;@/components/TodoInput.vue&amp;#39; export default { name: &amp;#39;TodoView&amp;#39;, components: { TodoList, TodoInput, }, data() { return { todos: [ { id: 1, content: &amp;#39;Django 복습&amp;#39;, isCompleted: true, }, { id: 2, content: &amp;#39;Vue 복습&amp;#39;, isCompleted: false, }, { id: 3, content: &amp;#39;저녁&amp;#39;, isCompleted: false, }, ] } }, methods: { updatedTodo(todo) { todo.</description>
    </item>
    
    <item>
      <title>2020.06.02</title>
      <link>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.02.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.02.html</guid>
      <description>오늘 배운 것  Vue로 Youtube API를 이용해 영상 찾기 및 재생
   npm i axios로 axios 패키지 설치하여 이용
  App.vue를 작성
&amp;lt;template&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;SearchBar @input-change=&amp;#34;onInputChange&amp;#34;/&amp;gt; &amp;lt;VideoList :videos=&amp;#34;videos&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import axios from &amp;#39;axios&amp;#39; import SearchBar from &amp;#39;@/components/SearchBar.vue&amp;#39; import VideoList from &amp;#39;@/components/VideoList.vue&amp;#39; const YOUTUBE_API_KEY = process.env.VUE_APP_YOUTUBE_API_KEY const YOUTUBE_API_URL = &amp;#39;https://www.googleapis.com/youtube/v3/search&amp;#39; export default { name: &amp;#39;App&amp;#39;, components: { SearchBar, VideoList }, data() { return { videos: [], } }, methods: { onInputChange(userInput) { const config = { params: { key: YOUTUBE_API_KEY, part: &amp;#39;snippet&amp;#39;, type: &amp;#39;video&amp;#39;, q: userInput, } } axios.</description>
    </item>
    
    <item>
      <title>2020.06.03</title>
      <link>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.03.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.03.html</guid>
      <description>오늘 한 것  Vue Project
 구현과정   vue 프로젝트 생성 기본 구조 설정 필요 기능 추가   1. vue 프로젝트 생성  vue create project명 을 bash에서 실행 router 사용을 위한 vue add router cd project명으로 폴더 이동 후 필요한 axios와 같은 패키지 설치  ex) npm i axios , npm i lodash    2. 기본 구조 설정   영화 목록을 가져오고 보여 주는 MovieView.</description>
    </item>
    
    <item>
      <title>2020.06.04</title>
      <link>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.04.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.04.html</guid>
      <description>오늘 한 것  SWEA 문제풀이
   생일파티
 python  for t in range(int(input())): n, m = map(int, input().split()) a = [[]for _ in range(n+1)] for i in range(m): n1, n2 = map(int,input().split()) a[n1].append(n2) a[n2].append(n1) result = set() result.update(a[1]) for i in a[1]: result.update(a[i]) if 1 in result: result.remove(1) print(f&amp;#34;#{t+1} {len(result)}&amp;#34;)   보급로
 C++  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std; int map[100][100]; int dis[100][100]; int dx[4] = {0, 0, -1, 1}; int dy[4] = {-1, 1, 0, 0}; int n; bool border(int x, int y) { return (0 &amp;lt;= x &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; 0 &amp;lt;= y &amp;amp;&amp;amp; y &amp;lt; n); } void solv() { queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; q; q.</description>
    </item>
    
    <item>
      <title>2020.06.08</title>
      <link>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.08.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.08.html</guid>
      <description>오늘 배운 것 </description>
    </item>
    
    <item>
      <title>2020.06.09</title>
      <link>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.09.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/6%EC%9B%94/20.06.09.html</guid>
      <description>오늘 배운 것 </description>
    </item>
    
  </channel>
</rss>