<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssl on 여러가지</title>
    <link>https://gudongyeop.github.io/tags/ssl.html</link>
    <description>Recent content in ssl on 여러가지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://gudongyeop.github.io/tags/ssl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>https 사용하기</title>
      <link>https://gudongyeop.github.io/server/https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/server/https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</guid>
      <description>https 사용하기(docker, nginx 사용)  처음에 openssl 로 .key 와 .cert를 만들어 사용했지만 인증되지 않았기 때문에 https가 나왔음. 그래서 certbot을 이용하여 다시 인증키를 발급받아 사용.
 1. certbot 이용하여 키 발급  certbot certonly --standalone -d 도메인이름 으로 키 발급 발급이 완료되면 /etc/letsencrypt/live/도메인이름 경로에 cert.pem chain.pem fullchain.pem privkey.pem 파일들이 생김  2. Nginx 설정  나는 default.conf에서 설정하여 실행시켰음 생성된 파일을 다른 폴더에 넣어서 사용했음  upstream client {server 도메인이름;}server {listen 80;server_name 도메인이름;return 301 https://$host$request_uri;}server {listen 443 ssl;server_name 도메인이름; ssl_certificate /ssl/fullchain1.</description>
    </item>
    
  </channel>
</rss>