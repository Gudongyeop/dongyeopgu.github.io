<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on 여러가지</title>
    <link>https://gudongyeop.github.io/tags/django.html</link>
    <description>Recent content in django on 여러가지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Apr 2020 22:54:07 +0900</lastBuildDate>
    
	<atom:link href="https://gudongyeop.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django 시작하기</title>
      <link>https://gudongyeop.github.io/django/django_start.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_start.html</guid>
      <description>기초  1. django 설치 $ pip install django==2.1.15(2.1.15 기준으로 배웠기 때문에)
2. 프로젝트 시작 $ django-admin startproject {프로젝트 이름}그 후에 프로젝트 폴더의 settings.py에서 ALLOWED_HOST = [&amp;#39;*&amp;#39;]로 수정3. App 만들기 # manage.py 파일이 있는 폴더에서 터미널 진입 후 bash 에 $ python manage.py startapp {앱 이름} # 그 후에 settings.py에서  INSTALLED_APPS = [&amp;#39;{앱 이름}&amp;#39; 추가]4. urls.py 작성 # 프로젝트 이름/urls.py에서 예를 들어 index 페이지를 넣을 경우  from app이름 import views #추가 urlpatterns =[path(&amp;#39;index/&amp;#39;, views.</description>
    </item>
    
    <item>
      <title>Docker-compose로 Django 사용</title>
      <link>https://gudongyeop.github.io/server/docker-compose%EB%A1%9C-django-%EC%82%AC%EC%9A%A9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/server/docker-compose%EB%A1%9C-django-%EC%82%AC%EC%9A%A9.html</guid>
      <description>Docker-compose &amp;amp; Django &amp;amp; Gunicorn  Docker-compose로 Django &amp;amp; Gunicorn 사용하기
   Dockerfile
FROMpython:3.6.9ENV PYTHONUNBUFFERED 1RUN mkdir /backendWORKDIR/backendADD requirements.txt /backend/RUN pip install --upgrade pipRUN pip install -r requirements.txtADD . /backend/  docker-compose.yml
backend:build: context: ./backenddockerfile: Dockerfilerestart: alwaysenv_file:- ./backend/.envexpose:- &amp;#34;8001&amp;#34;volumes:- &amp;#39;./backend:/backend&amp;#39;command:&amp;#34;gunicorn --workers=2 --bind=0.0.0.0:8001 backend.wsgi:application&amp;#34; 내부 접속만 열기위한 설정  backend-dev:build: context: .</description>
    </item>
    
    <item>
      <title>Django CRUD</title>
      <link>https://gudongyeop.github.io/django/django_crud.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_crud.html</guid>
      <description>CRUD - Create, Read, Update, Delete  1. Model 사용할 경우 1. Model 만들기 (ex: Article이라는 모델을 만들경우) # 프로젝트 명/App이름/models.py class Article(models.Model):title = models.CharField(max_length=140)content = models.TextField()created_at = models.DateTimeField(auto_now_add=True)updated_at = models.DateTimeField(auto_now=True) models.Model 을 상속받은 클래스를 생성한다. 속성은 내가 구성하고 싶은 테이블의 컬럼의 이름을 지정하고, 데이터 타입에 맞춰서 필드를 정의한다. 위에서 정의된 필드 정보  CharField :  max_length : 필수   DateTimeField  auto_now_add : (선택) 생성시에만 자동으로 해당 시간 값 설정 auto_now : (선택) 수정시마다 자동으로 해당 시간 값 설정   이외의 필드는 https://docs.</description>
    </item>
    
    <item>
      <title>Django Paginator</title>
      <link>https://gudongyeop.github.io/django/django_paginator.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_paginator.html</guid>
      <description>Paginator 사용하기   게시판 같은 곳에서 리스트의 양이 많아 질 경우 나누어 보여주기 위해서 사용
여기 적힌 예에서 model은 Review 이고 forms는 ReviewForm이다.
bootstrap을 사용했음.
 1. views.py에 내용 추가하기 from django.core.paginator import Paginatordef review_list(request):reviews = Review.objects.order_by(&amp;#39;-pk&amp;#39;)paginator = Paginator(reviews, 5) #한 페이지 당 몇개 씩 보여줄 지 지정 page_number = request.GET.get(&amp;#39;page&amp;#39;)page_obj = paginator.get_page(page_number)reviews_all = get_list_or_404(Review) #전체 개수를 보기 위해 total_count = len(reviews_all)	# 리뷰의 총 개수  total_page = total_count//5	# 리뷰 총 개수 / 한 페이지에 보여줄 수 page_range = range(1,total_page+1)context = {&amp;#39;reviews&amp;#39;: reviews,&amp;#39;page_obj&amp;#39;: page_obj,&amp;#39;page_range&amp;#39;: page_range,}return render(request, &amp;#39;앱이름/review_list.</description>
    </item>
    
    <item>
      <title>Django User (1)</title>
      <link>https://gudongyeop.github.io/django/django_login.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_login.html</guid>
      <description>User 관리(sign in, out, up)   로그인 기능을 넣는 방법
model을 만들 필요 없이 django에서 제공하는 user 모델을 사용함
bootstrap 사용을 기반으로 작성함
 1. accounts라는 새로운 app을 작성 2. 기본 제공되는 User 모델을 사용하기 때문에 forms.py만 작성 from django.forms import ModelFormfrom django.contrib.auth.models import User # django에서 기본 제공하는 model이 있음. from django import formsclass SignupForm(ModelForm): #회원가입을 제공하는 class이다. username = forms.CharField(max_length=20,min_length=6,widget=forms.TextInput(attrs={&amp;#39;class&amp;#39;: &amp;#39;form-control&amp;#39;}))password = forms.</description>
    </item>
    
    <item>
      <title>Django User (2)</title>
      <link>https://gudongyeop.github.io/django/django_change_user.html</link>
      <pubDate>Tue, 14 Apr 2020 16:15:29 +0900</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_change_user.html</guid>
      <description>User 관리(change, customizing)   customizing 방법은 여러가지가 있지만, 앞서 사용했던 방법과 다르게 여기서는 AbstractUser를 상속 받아서 User를 customizing후 사용함
UserChangeForm도 마찬가지로 ChangeForm을 상속받아 customizing 해서 사용함
bootstrap을 사용하기 위해 widget에 attrs도 추가
 1. models.py에서 AbstractUser를 상속 from django.db import modelsfrom django.contrib.auth.models import AbstractUser # AbstractUser를 가져옴 # Create your models here. class User(AbstractUser): # User 모델을 AbstractUser 상속받음 # 추가할 내용을 작성 Korean_name = models.</description>
    </item>
    
    <item>
      <title>Django Comment</title>
      <link>https://gudongyeop.github.io/django/django_comment.html</link>
      <pubDate>Tue, 21 Apr 2020 22:54:07 +0900</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_comment.html</guid>
      <description>Django 댓글 작성 &amp;amp; 삭제  게시글의 model은 Article로 만들었을 경우임. ForeignKey를 사용.
 1. 댓글 작성  models.py에서 댓글 설정을 위한 class를 만든다.(user 설정을 안했을 경우)  class Comment(models.Model):article = models.ForeignKey(Article, on_delete=models.CASCADE)#on_delete=models.CASCADE는 ForeignKeyField가 삭제 될때 인스턴스도 같이 삭제 content = models.TextField() forms.py에도 추가  from django import formsfrom .models import Commentclass CommentForm(forms.ModelForm):class Meta:model = Commentfields = [&amp;#39;content&amp;#39;]# fields를 __all__로 해도 됨(all로 했을 경우에는 댓글 작성시 모든 값을 잘 입력 해야한다.</description>
    </item>
    
    <item>
      <title>Django M:N</title>
      <link>https://gudongyeop.github.io/django/django_like_follow.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_like_follow.html</guid>
      <description>Django M:N model  Django에서 좋아요 기능이나 팔로우 기능처럼 M:N 관계 만들기
ManyToManyField 이용
  좋아요 기능을 위한 model 추가(게시글 모델)  # 좋아요 기능을 위한 article_like_users 테이블 생성 class 좋아요 기능을 추가할 클래스 명: like_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=&amp;#39;like_articles&amp;#39;)# 팔로우 기능을 위한   팔로우 기능을 위한 model 추가(User 모델을 Customizing)  class User(AbstractUser):followers = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=&amp;#39;followings&amp;#39;) 게시글 app의 views.py에서 좋아요 기능 설정  def like(request, pk):article = get_object_or_404(Article, pk=pk)# 좋아요를 누르면, &amp;gt;&amp;gt; DB에 존재할 경우 if article.</description>
    </item>
    
    <item>
      <title>Django REST Framework</title>
      <link>https://gudongyeop.github.io/django/django_rest_api.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_rest_api.html</guid>
      <description>Django Rest Framework(DRF) 1. REST API(DRF: Django Rest Framework)  REST API를 활용하면 백 엔드와 프론트 엔드 분리가 쉽고 코드의 재활용성이 좋다. REST API를 사용하기 위해서 먼저 설치가 필요  $ pip install djangorestframework settings.py에서 INSTALLED_APPS에 &#39;rest_framework&#39;추가 app 폴더에 serializers.py 파일을 만들고 내용 추가  # serializers.py from rest_framework import serializersfrom .models import * #필요한 모델이름 넣어주기 class &amp;lt;모델명&amp;gt;Serializer(serializers.ModelSerializer):class Meta:model = &amp;lt;모델명&amp;gt;fields = [&amp;#39;필요한 필드&amp;#39;] views.</description>
    </item>
    
    <item>
      <title>Django FBV vs CBV</title>
      <link>https://gudongyeop.github.io/django/django_fbv_cbv.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_fbv_cbv.html</guid>
      <description>Django FBV vs CBV  FBV CBV 차이
  FBV(Function Based View)  장점  구현이 간단함 읽기 편함 직관적인 코드 데코레이터 사용이 간단함   단점  확장 / 재사용이 힘듬     CBV(Class Based View)  장점  확장에 용의(재사용) 다중 상속 Mixin등 사용 가능 HTTP Method가 클래스 안에서 나누어 처리 강력한 Generic Class View 가 있음   단점  읽기 어려움(코드 흐름이 암시적) 상속되고 믹스되면서 코드 이해를 위해 찾아다녀야함 데코레이터 사용시 별로도 import 하거나 Method 생성       </description>
    </item>
    
    <item>
      <title>Django Image Upload</title>
      <link>https://gudongyeop.github.io/django/django_image_upload.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/django/django_image_upload.html</guid>
      <description>Django에서 Image Upload  POST요청을 통해 Vue.js에서 Django로 이미지 전송.
 기본 세팅  settings.py에서 아래 추가  MEDIA_URL = &amp;#39;/api/&amp;#39; # 기본 api url을 통일 시켜 번거로움을 줄이기 위해 /api/로 설정했음 MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;media&amp;#39;) # 이미지 파일이 저장되는 기본 위치를 media폴더로 설정  이미지 url도 다른 application과 같이 api로 시작하게 만들기 위해 MEDIA_URL을 /api/로 설정
  urls.py  from django.contrib import adminfrom django.urls import path, includefrom django.</description>
    </item>
    
    <item>
      <title>2020.04.14</title>
      <link>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.14.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.14.html</guid>
      <description>오늘 배운 것들  Django  User 모델을 사용하는 것보다 get_user_model 메서드를 사용하는 것을 추천 get_user_model이 더 유연하게 사용할 수 있음. 커스터마이징을 했을 경우에도 쉽게 사용가능 로그인을위해 AuthenticationForm을 사용 회원 탈퇴는 views.py에서 request.user.delete() 이용 Form / ModelForm  Form 제공 GET  context를 넘겨줌   데이터 양식 처리 POST  양식데이터(request.POST) &amp;gt; ModelForm으로 넘겨줌 그 후, 검증       HTTP는 connectless, stateless 그렇기 때문에 정보를 쿠키에 저장  User가 서버로 요청을 보냄 서버가 쿠키와 같이 응답을 보내줌 User가 서버로 요청을 보낼 때 쿠키와 함께 보내줌    </description>
    </item>
    
    <item>
      <title>2020.04.18</title>
      <link>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.18.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.18.html</guid>
      <description>오늘 공부한 것  AuthenticationForm을 커스터 마이징할 때 class Meta를 통해 attr을 작성 할 경우 원하는 대로 동작하지 않는다. 그렇기 때문에 init을 통해 attr을 추가해야 한다. 아래의 코드는 오늘 사용한 예  class myAuthenticationForm(AuthenticationForm):def __init__(self, *args, **kwargs):super(myAuthenticationForm, self).__init__(*args, **kwargs)self.fields[&amp;#39;username&amp;#39;].widget = forms.TextInput(attrs={&amp;#39;class&amp;#39;: &amp;#39;form-control&amp;#39;})self.fields[&amp;#39;password&amp;#39;].widget = forms.PasswordInput(attrs={&amp;#39;class&amp;#39;: &amp;#39;form-control&amp;#39;}) class Meta:model = Userfields = [&amp;#39;username&amp;#39;,&amp;#39;password&amp;#39;]</description>
    </item>
    
    <item>
      <title>2020.04.21</title>
      <link>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.21.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.21.html</guid>
      <description>오늘 배운 것 Django 댓글 작성 &amp;amp; 삭제  게시글의 model은 Article로 만들었을 경우임. ForeignKey를 사용.
   댓글 작성
  models.py에서 댓글 설정을 위한 class를 만든다.(user 설정을 안했을 경우)
class Comment(models.Model):article = models.ForeignKey(Article, on_delete=models.CASCADE)#on_delete=models.CASCADE는 ForeignKeyField가 삭제 될때 인스턴스도 같이 삭제 content = models.TextField()  forms.py에도 추가
from django import formsfrom .models import Commentclass CommentForm(forms.ModelForm):class Meta:model = Commentfields = [&amp;#39;content&amp;#39;]# fields를 __all__로 해도 됨(all로 했을 경우에는 댓글 작성시 모든 값을 잘 입력 해야한다.</description>
    </item>
    
    <item>
      <title>2020.04.26</title>
      <link>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.26.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.26.html</guid>
      <description>오늘한 것 Django PJT 추가  Q&amp;amp;A 페이지에서 댓글 추가
  댓글 작성 위해 1:N 관계 모델 작성  from django.db import modelsfrom django.conf import settings# 사진 및 정보를 업로드 하기 위한 모델 정의 class QandA(models.Model):title = models.CharField(max_length=100)user =models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)content = models.TextField()class Reply(models.Model):content = models.TextField()QandA = models.ForeignKey(QandA, on_delete=models.CASCADE)user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) ForeignKey를 이용하여 1:N관계 설정 후 migration
 </description>
    </item>
    
    <item>
      <title>2020.04.28</title>
      <link>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.28.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.28.html</guid>
      <description>오늘 배운 것 M:N 모델  Django에서 좋아요 기능이나 팔로우 기능처럼 M:N 관계 만들기
ManyToManyField 이용
  좋아요 기능을 위한 model 추가(게시글 모델)  # 좋아요 기능을 위한 article_like_users 테이블 생성 class 좋아요 기능을 추가할 클래스 명: like_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=&amp;#39;like_articles&amp;#39;)# 팔로우 기능을 위한   팔로우 기능을 위한 model 추가(User 모델을 Customizing)  class User(AbstractUser):followers = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=&amp;#39;followings&amp;#39;) 게시글 app의 views.py에서 좋아요 기능 설정  def like(request, pk):article = get_object_or_404(Article, pk=pk)# 좋아요를 누르면, &amp;gt;&amp;gt; DB에 존재할 경우 if article.</description>
    </item>
    
    <item>
      <title>2020.04.30</title>
      <link>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.30.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/4%EC%9B%94/20.04.30.html</guid>
      <description>오늘 한 것  혼자 해보는 PJT에서 paginator 추가 및 댓글 작성 시 발생한 오류 수정
  views.py 에서  @require_POST@login_requireddef reply_create(request, qanda_pk):qanda = get_object_or_404(QandA, pk=qanda_pk)form = ReplyForm(request.POST)if form.is_valid():reply=form.save(commit=False)reply.user = request.userreply.QandA = qandareply.save()return redirect(&amp;#39;reservation:QandA_detail&amp;#39;,qanda.pk) reply.QandA = qanda에서 QandA 모델을 qanda로 불러와서 NOT NULL 오류 발생했었음.
  paginator 추가 코드  def QandA_list(request):QandAs = QandA.objects.order_by(&amp;#39;-pk&amp;#39;) paginator = Paginator(QandAs, 4) #한 페이지 당 몇개 씩 보여줄 지 지정 page_number = request.</description>
    </item>
    
    <item>
      <title>2020.05.11</title>
      <link>https://gudongyeop.github.io/til/5%EC%9B%94/20.05.11.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/5%EC%9B%94/20.05.11.html</guid>
      <description>오늘 배운 것 1. REST API(DRF: Django Rest Framework)   REST API를 활용하면 백 엔드와 프론트 엔드 분리가 쉽고 코드의 재활용성이 좋다.
  REST API를 사용하기 위해서 먼저 설치가 필요
$ pip install djangorestframework  settings.py에서 INSTALLED_APPS에 &#39;rest_framework&#39;추가
  app 폴더에 serializers.py 파일을 만들고 내용 추가
# serializers.py from rest_framework import serializersfrom .models import * #필요한 모델이름 넣어주기 class &amp;lt;모델명&amp;gt;Serializer(serializers.ModelSerializer):class Meta:model = &amp;lt;모델명&amp;gt;fields = [&amp;#39;필요한 필드&amp;#39;]  views.</description>
    </item>
    
    <item>
      <title>2020.05.13</title>
      <link>https://gudongyeop.github.io/til/5%EC%9B%94/20.05.13.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/5%EC%9B%94/20.05.13.html</guid>
      <description>오늘 배운 것 Django   API를 이용해 DB에 저장
 네이버 영화 검색 API를 이용해 영화 목록을 검색한 후, 클릭한 영화를 DB에 저장
get_or_create를 사용
   views.py
def movie_list(request): # 영화 목록 naver_client_id = &amp;#34;발급받은 id&amp;#34;naver_client_secret = &amp;#34;발급받은 secret&amp;#34;if request.method == &amp;#39;GET&amp;#39;:client_id = naver_client_idclient_secret = naver_client_secretq = request.GET.get(&amp;#39;q&amp;#39;)Text = urllib.parse.quote(f&amp;#34;{q}&amp;#34;)url = &amp;#34;https://openapi.naver.com/v1/search/movie?query=&amp;#34; + Text # json 결과 movie_api_request = urllib.</description>
    </item>
    
    <item>
      <title>2020.05.20</title>
      <link>https://gudongyeop.github.io/til/5%EC%9B%94/20.05.20.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/5%EC%9B%94/20.05.20.html</guid>
      <description>오늘 한 것 간단한 PJT 구현 과정   Project 기본 설정 및 Model 작성 Data 가져오기 Javascript를 이용한 목록 구성 목록 랜덤 추천   1. Project 기본 설정 및 Model 작성  App의 이름을 accounts와 movies로 설정 한 후, 기본 setting을 변경 하고, 제공된 명세에 따라 Model 작성 후 migrations와 migrate를 했음.
 2. JSON 파일의 Data 가져오기  JSON 파일을 DB에 저장하기 위해서 python manage.py loaddata moviedata.json 이용.</description>
    </item>
    
    <item>
      <title>2020.06.08</title>
      <link>https://gudongyeop.github.io/til/6%EC%9B%94/20.06.08.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/6%EC%9B%94/20.06.08.html</guid>
      <description>오늘 배운 것 Django &amp;amp; Vue  Django를 백엔드로 Vue를 프론트엔드
Django Rest Framework를 사용
 Django 설정   전에 했던 Django Rest Framework를 사용하여 Serializers를 이용.
  따로 Templates를 만들지 않고 JSON 정보를 가지고 vue를 이용.
  settings.py의 INSTALLED_APP에서 아래 추가 후 사용.
  INSTALLED_APPS = [...&amp;#39;django.contrib.sites&amp;#39;,&amp;#39;rest_framework&amp;#39;, &amp;#39;rest_framework.authtoken&amp;#39;,&amp;#39;rest_auth&amp;#39;,&amp;#39;rest_auth.registration&amp;#39;,&amp;#39;allauth&amp;#39;,&amp;#39;allauth.account&amp;#39;,...]REST_FRAMEWORK = {&amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;: [&amp;#39;rest_framework.authentication.TokenAuthentication&amp;#39;,]}</description>
    </item>
    
    <item>
      <title>2020.06.09</title>
      <link>https://gudongyeop.github.io/til/6%EC%9B%94/20.06.09.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/6%EC%9B%94/20.06.09.html</guid>
      <description>오늘 배운 것 VUE 설정  vue router를 사용하여 Django와 연결하여 data가져옴.
axios, cookies 사용
  accounts와 관련된 기능을 사용하기 위해 Token을 쿠키로 저장하기 위해 cookies 사용  </description>
    </item>
    
    <item>
      <title>2020.06.10 ~ </title>
      <link>https://gudongyeop.github.io/til/6%EC%9B%94/20.06.10-~-30-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B3%BC%EC%A0%9C%EB%A1%9C-%EC%9D%B8%ED%95%9C-til-%EB%AF%B8%EC%97%85%EB%A1%9C%EB%93%9C.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gudongyeop.github.io/til/6%EC%9B%94/20.06.10-~-30-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B3%BC%EC%A0%9C%EB%A1%9C-%EC%9D%B8%ED%95%9C-til-%EB%AF%B8%EC%97%85%EB%A1%9C%EB%93%9C.html</guid>
      <description>프로젝트 기간으로 TIL 없음  Django와 Vue 이용한 프로젝트  </description>
    </item>
    
  </channel>
</rss>