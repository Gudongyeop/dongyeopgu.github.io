<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4월 on 여러가지</title>
    <link>https://dongyeopgu.github.io/tags/4%EC%9B%94.html</link>
    <description>Recent content in 4월 on 여러가지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://dongyeopgu.github.io/tags/4%EC%9B%94/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020.04.13 다시 기록 시작</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.13.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.13.html</guid>
      <description>오늘 배운 것들   Django에서 기본 제공하는 User 모델을 이용
  이를 이용하여 회원가입, 정보 수정하는 방법
  회원가입시 Django에서 제공하는 UserCreationForm을 사용
 UserCreationForm은 기본적으로 username과 password1, 2를 입력받음    </description>
    </item>
    
    <item>
      <title>2020.04.14</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.14.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.14.html</guid>
      <description>오늘 배운 것들  Django  User 모델을 사용하는 것보다 get_user_model 메서드를 사용하는 것을 추천 get_user_model이 더 유연하게 사용할 수 있음. 커스터마이징을 했을 경우에도 쉽게 사용가능 로그인을위해 AuthenticationForm을 사용 회원 탈퇴는 views.py에서 request.user.delete() 이용 Form / ModelForm  Form 제공 GET  context를 넘겨줌   데이터 양식 처리 POST  양식데이터(request.POST) &amp;gt; ModelForm으로 넘겨줌 그 후, 검증       HTTP는 connectless, stateless 그렇기 때문에 정보를 쿠키에 저장  User가 서버로 요청을 보냄 서버가 쿠키와 같이 응답을 보내줌 User가 서버로 요청을 보낼 때 쿠키와 함께 보내줌    </description>
    </item>
    
    <item>
      <title>2020.04.15</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.15.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.15.html</guid>
      <description>오늘 공부한 것들 &amp;amp; 생각한 것 - 생각  간단한 웹 서비스 ? 만들며, 배우고 공부한 것을 활용해보자 회원가입을 안해도 이용가능 하도록 (회원가입의 귀찮음&amp;hellip;) 자세한건 프로젝트 repo를 따로 만들어 관리해보자는 생각  - 공부한것  Django QuerySet API 관련. (참고 : Django 공식문서) - 생각한 웹 페이지에서 필요한 것을 넣기 위해(어디서 관련 정보를 봐야하는지 기록정도, 다 외우는것은 힘들기에) Image를 넣기 위한 ImageField 관련 (Django 공식문서)  </description>
    </item>
    
    <item>
      <title>2020.04.16</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.16.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.16.html</guid>
      <description>오늘 공부한 것  Algorithm 문제 풀이 (Tree) SWEA-노드의 합  class BinaryTree: def __init__(self, n): self.n = n self.node_list = [0] *(n+1) def insert(self, num1, num2): self.node_list[num1] = num2 def leaf(self, node): if node * 2 &amp;gt; n: self.sum += self.node_list[node] else: self.leaf(node * 2) if node * 2 != n: self.leaf(node * 2 + 1) def result(self, l): self.sum = 0 self.leaf(l) return self.sum for t in range(int(input())): n, m, l = map(int, input().</description>
    </item>
    
    <item>
      <title>2020.04.17</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.17.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.17.html</guid>
      <description>오늘 생각한 것(혼자해보는 프로젝트)  지금 까지 배운 django로 간단한 물건 예약신청 웹페이지를 만들려 하다보니 필요한게 많았음 회원가입인듯 아닌듯 만들기 위한 생각이 필요했음 신청과 동시에 회원가입을 하는 방향으로 생각했음 관련 파일은 따로 project로 올릴 예정  </description>
    </item>
    
    <item>
      <title>2020.04.18</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.18.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.18.html</guid>
      <description>오늘 공부한 것  AuthenticationForm을 커스터 마이징할 때 class Meta를 통해 attr을 작성 할 경우 원하는 대로 동작하지 않는다. 그렇기 때문에 init을 통해 attr을 추가해야 한다. 아래의 코드는 오늘 사용한 예  class myAuthenticationForm(AuthenticationForm): def __init__(self, *args, **kwargs): super(myAuthenticationForm, self).__init__(*args, **kwargs) self.fields[&amp;#39;username&amp;#39;].widget = forms.TextInput( attrs={ &amp;#39;class&amp;#39;: &amp;#39;form-control&amp;#39; } ) self.fields[&amp;#39;password&amp;#39;].widget = forms.PasswordInput( attrs={ &amp;#39;class&amp;#39;: &amp;#39;form-control&amp;#39; } ) class Meta: model = User fields = [&amp;#39;username&amp;#39;,&amp;#39;password&amp;#39;] </description>
    </item>
    
    <item>
      <title>2020.04.19</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.19.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.19.html</guid>
      <description>오늘 공부한 것  어제에 이어서 신청 완료시 메일을 발송하게 만들려고 함 django에서 email보내는 것도 지원을 하기때문에 아래 코드를 이용했음 먼저 settings.py에서 아래 코드를 추가  EMAIL_HOST = &amp;#34;smtp.gmail.com&amp;#34; EMAIL_HOST_USER = &amp;#39;내 gmail 주소@gmail.com&amp;#39; EMAIL_HOST_PASSWORD = &amp;#39;내 gmail 비밀번호&amp;#39; EMAIL_PORT = 587 EMAIL_USE_TLS = True  views.py에서 아래 코드 이용(공식문서의 example) 여기 참고  from django.core.mail import send_mail send_mail( &amp;#39;Subject here&amp;#39;, &amp;#39;Here is the message.&amp;#39;, &amp;#39;from@example.com&amp;#39;, [&amp;#39;to@example.com&amp;#39;], fail_silently=False, ) </description>
    </item>
    
    <item>
      <title>2020.04.20</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.20.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.20.html</guid>
      <description>오늘 배운 것 SQL 관련 1. Database 기본  RDBMS  데이터베이스를 관리하는 시스템  빠르고 효율적으로 관리하기 위해   RDBMS(Relational Database Management System)  관계형 데이버 베이스 관리 시스템 table(relation) 활용     기본 용어  스키마: DB의 자료 구조와 제약 조건에 대한 전반적인 명세를 기술한 것 테이블 : 열과 행을 사용해 조직한 데이터 요소들 집합 열(column)/필드(field)/속성(attribute) 행(row)/tuple/레코드(record) PK(Primary key):  각 행의 고유값으로 저장된 레코드를 고유하게 식별할 수 있는 값 중복되는 값이 없으면 다 pk로 사용 가능 == unique한 값에 부여      2.</description>
    </item>
    
    <item>
      <title>2020.04.21</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.21.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.21.html</guid>
      <description>오늘 배운 것 Django 댓글 작성 &amp;amp; 삭제  게시글의 model은 Article로 만들었을 경우임. ForeignKey를 사용.
   댓글 작성
  models.py에서 댓글 설정을 위한 class를 만든다.(user 설정을 안했을 경우)
class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) #on_delete=models.CASCADE는 ForeignKeyField가 삭제 될때 인스턴스도 같이 삭제 content = models.TextField()   forms.py에도 추가
from django import forms from .models import Comment class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [&amp;#39;content&amp;#39;] # fields를 __all__로 해도 됨(all로 했을 경우에는 댓글 작성시 모든 값을 잘 입력 해야한다.</description>
    </item>
    
    <item>
      <title>2020.04.22</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.22.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.22.html</guid>
      <description>오늘 한 것 간단한 Django 프로젝트  페어프로그래밍으로 간단하게 로그인 후 게시글을 작성하고 댓글을 작성할 수 있는 페이지를 만들었음
 </description>
    </item>
    
    <item>
      <title>2020.04.23</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.23.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.23.html</guid>
      <description>오늘 배운 것 Computational Thinking  SW Expert Academy에 있는 Computational Thinking 학습
   수와 표현
 명제 관련 예)   문제 12 : n^2 이 3의 배수이면 n은 3의 배수이다.
&amp;ndash;&amp;gt; 대우 : n이 3의 배수가 아니면 n^2도 3의 배수가 아니다.
  n = 3m + 1 일경우 n^2 = 9m^2 + 6m + 1 = 3(3m^2 + 2m) + 1
  n = 3m + 2 일경우 n^2 = 9m^2 + 12m +4 = 3(3m^2 + 4m + 1) + 1</description>
    </item>
    
    <item>
      <title>2020.04.24</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.24.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.24.html</guid>
      <description>오늘한 것 Django 복습  Django에서 간단한 User 생성, 로그인, 로그아웃 구현 복습
댓글 위한 모델 작성 복습
  댓글 작성을 위해 ForeignKey 사용 (1:N 관계)  </description>
    </item>
    
    <item>
      <title>2020.04.25</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.25.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.25.html</guid>
      <description>오늘한 것 Django PJT 추가  혼자 만들어보는 웹 페이지에서 사용자들을 위한 Q&amp;amp;A 페이지 작성
 </description>
    </item>
    
    <item>
      <title>2020.04.26</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.26.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.26.html</guid>
      <description>오늘한 것 Django PJT 추가  Q&amp;amp;A 페이지에서 댓글 추가
  댓글 작성 위해 1:N 관계 모델 작성  from django.db import models from django.conf import settings # 사진 및 정보를 업로드 하기 위한 모델 정의 class QandA(models.Model): title = models.CharField(max_length=100) user =models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) content = models.TextField() class Reply(models.Model): content = models.TextField() QandA = models.ForeignKey(QandA, on_delete=models.CASCADE) user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  ForeignKey를 이용하여 1:N관계 설정 후 migration
 </description>
    </item>
    
    <item>
      <title>2020.04.27</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.27.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.27.html</guid>
      <description>오늘 배운 것 이미지 업로드  ImageField를 활용하여 업로드
  단순히 ImageField를 사용하기 위해서는 pillow패키지를 설치해야 한다.  $ pip install pillow  Resizing 하기 위해서는 pilkit, django-imagekit 패키지를 설치  $ pip install pilkit django-imagekit  ImageField를 사용할 app의 models.py를 수정  class &amp;lt;사용할 모델&amp;gt;: image = models.ImageField() # 저장하지 않고 잘라서 표현할 때(ex. thumbnail) image_thumbnail = ImageSpecField(source=&amp;#39;image&amp;#39;, processors=[Thumbnail(300, 300)], format=&amp;#39;JPEG&amp;#39;, options={&amp;#39;quality&amp;#39;: 60})  Image 파일을 저장할 경로 설정 settings.</description>
    </item>
    
    <item>
      <title>2020.04.28</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.28.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.28.html</guid>
      <description>오늘 배운 것 M:N 모델  Django에서 좋아요 기능이나 팔로우 기능처럼 M:N 관계 만들기
ManyToManyField 이용
  좋아요 기능을 위한 model 추가(게시글 모델)  # 좋아요 기능을 위한 article_like_users 테이블 생성 class 좋아요 기능을 추가할 클래스 명: like_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=&amp;#39;like_articles&amp;#39;) # 팔로우 기능을 위한   팔로우 기능을 위한 model 추가(User 모델을 Customizing)  class User(AbstractUser): followers = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=&amp;#39;followings&amp;#39;)  게시글 app의 views.py에서 좋아요 기능 설정  def like(request, pk): article = get_object_or_404(Article, pk=pk) # 좋아요를 누르면, &amp;gt;&amp;gt; DB에 존재할 경우 if article.</description>
    </item>
    
    <item>
      <title>2020.04.29</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.29.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.29.html</guid>
      <description>오늘 한 것  SWEA. 5185 [파이썬 S/W 문제해결 구현] 1일차 - 이진수
 알고리즘 풀이 for t in range(int(input())): n, num = map(str, input().split()) print(f&amp;#39;#{t+1}&amp;#39;,end=&amp;#34; &amp;#34;) for a in num: b = &amp;#39;0x&amp;#39;+ a.lower() hex_num = int(a, 16) # 16진수를 10진수로 print(&amp;#34;{0:b}&amp;#34;.format(hex_num).zfill(4), end=&amp;#34;&amp;#34;) # 10진수를 2진수로 바꾸면서 (4자리씩) print() </description>
    </item>
    
    <item>
      <title>2020.04.30</title>
      <link>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.30.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/til/4%EC%9B%94/20.04.30.html</guid>
      <description>오늘 한 것  혼자 해보는 PJT에서 paginator 추가 및 댓글 작성 시 발생한 오류 수정
  views.py 에서  @require_POST @login_required def reply_create(request, qanda_pk): qanda = get_object_or_404(QandA, pk=qanda_pk) form = ReplyForm(request.POST) if form.is_valid(): reply=form.save(commit=False) reply.user = request.user reply.QandA = qanda reply.save() return redirect(&amp;#39;reservation:QandA_detail&amp;#39;,qanda.pk)  reply.QandA = qanda에서 QandA 모델을 qanda로 불러와서 NOT NULL 오류 발생했었음.
  paginator 추가 코드  def QandA_list(request): QandAs = QandA.objects.order_by(&amp;#39;-pk&amp;#39;) paginator = Paginator(QandAs, 4) #한 페이지 당 몇개 씩 보여줄 지 지정 page_number = request.</description>
    </item>
    
  </channel>
</rss>