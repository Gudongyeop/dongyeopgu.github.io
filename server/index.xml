<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server 관련 on 여러가지</title>
    <link>https://dongyeopgu.github.io/server.html</link>
    <description>Recent content in Server 관련 on 여러가지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://dongyeopgu.github.io/server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker-compose 이용하기</title>
      <link>https://dongyeopgu.github.io/server/docker-compose-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/server/docker-compose-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0.html</guid>
      <description>Docker-compose를 이용한 배포  Docker compose를 이용하여 배포했던 것 정리.
혼자 찾아보고 진행했던 내용이기 때문에 정확하지 않을 수 있음.
 1. docker-compose.yml 파일 만들기  docker 실행 옵션을 미리 작성하고 편하게 사용하기 위함 frontend, backend, database, webserver를 각각 컨테이너로 사용했음 frontend는 vue cli로 backend는 node.js, 웹서버는 nginx, db는 mysql 이용 아래 docker-compose.yml파일은 내가 사용했던 것. 루트 폴더에 작성  version: &amp;#39;3&amp;#39;services:frontend:build:context: ./frontenddockerfile: Dockerfilevolumes:- &amp;#39;.</description>
    </item>
    
    <item>
      <title>많이 사용한 Ubuntu 명령어</title>
      <link>https://dongyeopgu.github.io/server/%EB%A7%8E%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%9C-ubuntu-%EB%AA%85%EB%A0%B9%EC%96%B4.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/server/%EB%A7%8E%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%9C-ubuntu-%EB%AA%85%EB%A0%B9%EC%96%B4.html</guid>
      <description>명령어  나중에 생각안날때 보려고 만든 Ubuntu 18.04 에서 배포시 많이 사용했던 명령어들
  netstat -nlpt 현재 listen 중인 포트 확인 netstat -nat로도 확인 가능 netstat -nap | grep 포트 번호 특정 포트 확인 fuser -k -n tcp 포트번호 포트번호에서 사용중인 프로세스 죽이기 vi로 파일을 읽고 수정했을 때 :wq저장후 닫기 :qa 저장안하고 닫기 :qa! qa안될때 docker ps 현재 켜져있는 docker 확인 docker stop 뒤에 docker ps `으로 감싸면 실행중인 docker 파일들 종료 docker-compose build --no-cache 캐시 이용 안하고 build iptables -L --line-numbers iptable 룰 번호 확인 iptables -D chain이름 숫자 위에서 확인한 번호 룰 삭제할 때 iptables -I chain이름 -p tcp -s 허용할 ip --dport 포트번호 -j ACCEPT 지정한 포트 번호 특정 IP 허용 맨 윗줄에 룰 삽입  SSH 접속 느릴 때  vi /etc/ssh/sshd_config로 sshd_config 파일 수정  GSSAPIAuthentication no 주석 해제 UseDNS no주석 해제 $ service sshd restart 로 재시작    </description>
    </item>
    
    <item>
      <title>https 사용하기</title>
      <link>https://dongyeopgu.github.io/server/https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/server/https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</guid>
      <description>https 사용하기(docker, nginx 사용)  처음에 openssl 로 .key 와 .cert를 만들어 사용했지만 인증되지 않았기 때문에 https가 나왔음. 그래서 certbot을 이용하여 다시 인증키를 발급받아 사용.
 1. certbot 이용하여 키 발급  certbot certonly --standalone -d 도메인이름 으로 키 발급 발급이 완료되면 /etc/letsencrypt/live/도메인이름 경로에 cert.pem chain.pem fullchain.pem privkey.pem 파일들이 생김  2. Nginx 설정  나는 default.conf에서 설정하여 실행시켰음 생성된 파일을 다른 폴더에 넣어서 사용했음  upstream client {server 도메인이름;}server {listen 80;server_name 도메인이름;return 301 https://$host$request_uri;}server {listen 443 ssl;server_name 도메인이름; ssl_certificate /ssl/fullchain1.</description>
    </item>
    
    <item>
      <title>Nginx 파일 업로드 용량 설정</title>
      <link>https://dongyeopgu.github.io/server/nginx-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%9A%A9%EB%9F%89-%EC%84%A4%EC%A0%95.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongyeopgu.github.io/server/nginx-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%9A%A9%EB%9F%89-%EC%84%A4%EC%A0%95.html</guid>
      <description>Docker-compose &amp;amp; Nginx  Docker-compose와 Nginx 사용하며 파일 업로드시 용량이 클 경우 해결하기 위한 방법
   default.conf 파일
....server {listen 443 ssl;server_name frontend;ssl on; ssl_certificate /ssl/fullchain.pem;ssl_certificate_key /ssl/privkey.pem; access_log /var/log/nginx/data-access.log combined;location / {proxy_pass http://frontend;proxy_set_header Host $host;proxy_http_version 1.1;proxy_set_header Upgrade $http_upgrade;client_max_body_size 20M;......  default.conf 에서 location 부분에 client_max_body_size &amp;lt;용량&amp;gt;; 추가
  </description>
    </item>
    
  </channel>
</rss>